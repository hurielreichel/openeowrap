% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filter.R
\name{filter}
\alias{filter}
\alias{filter.datacube}
\title{Filter Datacube}
\usage{
\method{filter}{datacube}(
  .data = NULL,
  ...,
  .condition = NULL,
  .dimension = NULL,
  .context = NULL,
  .extent = NULL,
  .geometries = NULL,
  .year = NULL,
  .month = NULL,
  .p = openeo::processes(.con),
  .con = NULL
)
}
\arguments{
\item{.data}{datacube object from tidyopeneo.}

\item{...}{any parameter inherited from dplyr}

\item{.condition}{(optional) logical. For **array_filter** : A condition that is evaluated
against each dimension label in the specified dimension. A dimension label and
the corresponding data is preserved for the given dimension, if the condition
returns true.}

\item{.dimension}{(optional) For **filter_temporal** : The name of the temporal dimension
to filter on. If no specific dimension is specified or it is set to `null`,
the filter applies to all temporal dimensions. Fails with a `DimensionNotAvailable`
exception if the specified dimension does not exist.}

\item{.context}{(optional) : any Additional data to be passed to the condition.
Mandatory for filter_labels or array_filter processes.}

\item{.extent}{(optional) For **filter_temporal**, the Left-closed temporal interval, i.e.
an array with exactly two elements: The first element is the start of the
temporal interval. The specified instance in time is **included** in the
interval. The second element is the end of the temporal interval. The
specified instance in time is **excluded** from the interval. The specified
temporal strings follow [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339.html).
Also supports open intervals by setting one of the boundaries to `null`, but
never both.
For **filter_bbox**, the bounding box, which may include a vertical axis
(see `base` and `height`).}

\item{.geometries}{(optional) For **filter_spatial** : one or more geometries used for
filtering, specified as GeoJSON.}

\item{.year}{integer or list of integers stating the years you want to filter on the
datacube.}

\item{.month}{integer or list of integers referring to the months you want to filter
on the datacube.}

\item{.p}{(optional) processes available at .con}

\item{.con}{(optional) openeo connection. Default to NULL}
}
\value{
datacube
}
\description{
Filter datacube wraps the filter_labels, filter_temporal, filter_bbox,
filter_spatial and array_filter functions into a simulated dplyr's \code{\link[dplyr]{filter}}.
}
\examples{
library(tidyopeneo)
library(sf)

con = connect(host = "https://openeo.cloud")
dc = datacube(id = "SENTINEL1_GRD")

# filter_temporal
dc_y = dc \%>\% filter(.year = c(2020, 2021, 2022))

dc_m = dc \%>\% filter(.month = c(6,7,8))

dc_ym = dc \%>\%  filter(.year = c(2020, 2021, 2022), .month = c(6,7,8))

# filter_temporal and filter_bbox
dc2 = dc \%>\%
    filter(.extent = c("2021-01-01", "2021-03-03")) \%>\%
    filter(.extent = c(west = 6.09, east = 6.99, south = 46.15, north = 46.57))

# filter_spatial
lon = c(6.22, 6.24)
lat = c(46.20, 46.25)
pol_coords = dplyr::tibble(lon, lat)
pol <- pol_coords \%>\%
    st_as_sf(coords = c("lon", "lat"), crs = 3857) \%>\%
    st_bbox() \%>\%
    st_as_sfc()

dc = dc2 \%>\% filter(.geometries = pol)

# array_filter
# ToDO...
# filter_labels
# ToDO
}
\seealso{
[openeo::list_processes()]
}
